"""
# 문제 요약
- 함수 분석
    - n : 바닥의 길이
    - result : 타일을 채울 수 있는 방법의 개수
- 제한 사항
    - n은 6만 이하 자연수
    - result는 1,000,000,007로 나눈 후 나머지 return
- 동작 사항
    - 2x1인 타일을 이용해 n인 바닥을 가득 채우기
    - 타일을 가로나 세로로 돌려가며 배치

# 문제 풀이
- 동적계획법을 이용해서 문제를 풉니다.
- 상향식 방법을 이용합니다.
- 개수 예측 (n : result)
    - 1 : 1
    - 2 : 2
    - 3 : s(2) + s(1) => 3
    - 4 : s(3) + s(2) ->  => 5
- 파악한 공식 검토
    - 시작 지점을 세로 1개로 시작할 지, 가로 2개로 시작할 지로 나눠 생각합니다.
    - 세로 1개로 시작하면 잔여를 채우는 방법의 가지수는 n-1 일 때의 방법의 개수가 됩니다.
    - 가로 2개로 시작하면 잔여를 채우는 방법의 가지수는 n-2 일 때의 방법의 개수가 됩니다.
    - 따라서 방법의 개수를 S(n)라고 하면, 점화식은 S(n) = S(n-1) + S(n-2) 가 됩니다.
    - 추가로 S(1) = 1, S(2) = 2가 됩니다.
    - 동적 계획법을 이용한 피보나치 수열을 이용해서 문제를 풀면됩니다.
- 풀이 결과
    - 효율성 2, 5, 6 시간 초과
"""
def solution(n):
    answer = 0
    
    dp_list = [0, 1, 2] # S(0)은 사용하지 않음, S(1), S(2) 초기화
    for ii in range(3, n + 1): # n까지 반복이라 n + 1까지로 설정
        dp_list.append(dp_list[ii - 1] + dp_list[ii - 2])
        
    answer = dp_list[-1] # 마지막 값 반환
    return answer % 1000000007